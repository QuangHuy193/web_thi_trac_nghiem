import { useEffect, useState } from "react";
import classNames from "classnames/bind";

import styles from "./Exam.module.scss";
import { getAllExamsBySubSubjectIdAPI } from "../../apis";
import { showConfirmDialog } from "../confirmDialog/confirmDialog";
import { removeVietnameseTones } from "../../Utils/function";

const cx = classNames.bind(styles);

function Exam({
  user,
  setIdExam,
  setTimeExam,
  selectedSubject,
  setSelectedContent,
  setHeaderTitle,
  setQuestionsExam,
  searchValue,
  setIsLoading,
  setTitleLoading,
}) {
  // L∆∞u danh s√°ch ƒë·ªÅ thi t∆∞∆°ng ·ª©ng v·ªõi m√¥n h·ªçc ƒë√£ ch·ªçn
  const [exams, setExams] = useState([]);

  const [isFetchDone, setIsFetchDone] = useState(false);

  // useEffect: g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch ƒë·ªÅ khi selectedSubject thay ƒë·ªïi
  useEffect(() => {
    const getExams = async () => {
      setTitleLoading("ƒêang t·∫£i danh s√°ch b√†i thi...");
      setIsLoading(true);
      const data = await getAllExamsBySubSubjectIdAPI(selectedSubject);
      setIsLoading(false);
      setIsFetchDone(true);

      // C·∫≠p nh·∫≠t danh s√°ch ƒë·ªÅ thi
      if (!searchValue) {
        setExams(data);
      } else {
        const keyword = removeVietnameseTones(searchValue);

        const filtered = data.filter((exam) => {
          const examName = removeVietnameseTones(exam.title);
          return examName.includes(keyword);
        });

        setExams(filtered);
      }
    };
    getExams();
  }, [selectedSubject, searchValue, setTitleLoading, setIsLoading]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng click "L√†m b√†i"
  const handleClickDoExam = (idExam, nameExam, timeExam, questionExam) => {
    if (!user) {
      // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã c·∫£nh b√°o
      showConfirmDialog(
        "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p",
        "L·ªãch s·ª≠ l√†m b√†i s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u",
        "info",
        () => {
          // Cho ph√©p l√†m b√†i nh∆∞ng kh√¥ng l∆∞u l·ªãch s·ª≠
          handleDoExam(idExam, nameExam, timeExam, questionExam);
        },
        "L√†m b√†i",
        "H·ªßy"
      );
    } else {
      // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, cho l√†m b√†i nh∆∞ b√¨nh th∆∞·ªùng
      handleDoExam(idExam, nameExam, timeExam, questionExam);
    }
  };

  // x·ª≠ l√Ω b·∫•m l√†m b√†i
  const handleDoExam = (idExam, nameExam, timeExam, questionExam) => {
    setSelectedContent("doExam");
    setIdExam(idExam);
    setHeaderTitle(nameExam);
    setTimeExam(timeExam);
    setQuestionsExam(questionExam);
  };

  return (
    <div className={cx("exam-container")}>
      {/* Hi·ªÉn th·ªã danh s√°ch ƒë·ªÅ thi */}
      {isFetchDone ? (
        exams.length > 0 ? (
          exams.map((exam) => (
            <div key={exam.exam_id} className={cx("exam-card")}>
              {/* T√™n ƒë·ªÅ thi */}
              <h3 className={cx("exam-title")}>üìñ {exam.title}</h3>

              {/* M√¥ t·∫£ ƒë·ªÅ thi */}
              <p className={cx("exam-description")}>üìù {exam.description}</p>

              {/* Th·ªùi gian l√†m b√†i */}
              <p className={cx("exam-time")}>‚è±Ô∏è Th·ªùi gian: {exam.time} ph√∫t</p>

              {/* N√∫t l√†m b√†i */}
              <button
                className={cx("exam-button")}
                onClick={() =>
                  handleClickDoExam(
                    exam.exam_id,
                    exam.title,
                    exam.time,
                    exam.question
                  )
                }
              >
                üöÄ L√†m b√†i ngay
              </button>
            </div>
          ))
        ) : (
          <div className={cx("no-content")}>Kh√¥ng c√≥ b√†i thi n√†o cho m√¥n h·ªçc n√†y!</div>
        )
      ) : null}
    </div>
  );
}

export default Exam;
